;; 
;; Load Melpa packages
;; 
(require 'package)
(setq package-check-signature nil)
(add-to-list 'package-archives '(("melpa" . "https://melpa.org/packages/")
                                 ("elpa" . "https://elpa.gnu.org/packages/")
                                 ("org" . "http://orgmode.org/elpa/")))
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (doom-modeline move-text atom-one-dark-theme geiser-racket racket-mode))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; doom modeline setup
;; (require 'doom-modeline)
;; (doom-modeline-mode 1)

;; 
;; move text init
;;
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))

(provide 'move-text)

(global-set-key [M-up] 'move-text-up)
(global-set-key [M-down] 'move-text-down)

(defconst copy-line-keys "\C-a\C- \C-e\M-w")
(global-set-key [M-S-down] (concat copy-line-keys "\C-m\C-y\C-a"))
(global-set-key [M-S-up] (concat copy-line-keys "\C-a\C-m\C-p\C-y\C-a"))

;;
;; loads one dark theme
;; 
(load-theme 'atom-one-dark t)

;; 
;; line number set
;; 
(when (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode))

;; 
;; remove menubar
;; 
(menu-bar-mode -1)

(setq-default
  ; Prefers spaces over tabs, tabs are evil
  indent-tabs-mode nil
  ; Set width for tabs
  tab-width 4
  ; Prefers the newest version of a file
  load-prefer-newer t
  ; The confirmation string when exiting Emacs
  confirm-kill-emacs 'y-or-n-p
  cursor-type 'bar
  ; don't save backups
  make-backup-files nil)
 
; Display time in the mode-line
(display-time-mode 1)
; Replace yes/no prompts with y/n
(fset 'yes-or-no-p 'y-or-n-p)
; Show the matching set of parentheses
(show-paren-mode 1)
