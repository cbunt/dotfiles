,stx (metafunction-rules test-thing (a b) (c d)) *
,stx (metafunction-rules test-thing (a b) (c d)) *
,stx (metafunction-rules test-thing (a b) (c d)) *
,stx (metafunction-rules test-thing (a b) (c d)) *
(require xrepl)
(require redex/reduction-semantics)
(require cpsc411/langs/v8)
(redex-match paren-x64-v8 p '(begin (set! rax rax) (set! rdi rdi)))
(redex-match paren-x64-v8 p '(begin (set! rax rax) (set! rdi rdi)))
(redex-match paren-x64-v8L p '(begin (set! rax rax) (set! rdi rdi)))
(redex-match paren-x64-v8L s '(begin (set! rax rax) (set! rdi rdi)))
(redex-match paren-x64-v8L (cross s) '(begin (set! rax rax) (set! rdi rdi)))
(redex-match
    paren-x64-v8L
    (compatible-closure-context s #:wrt p)
    '(begin (set! rax rax) (set! rdi rdi)))
(redex-match
    paren-x64-v8L
    p
    (term (begin (set! rax rax) (set! rdi rdi))))
(redex-match
    paren-x64-v8L
    s
    (term (begin (set! rax rax) (set! rdi rdi))))
(redex-match
    paren-x64-v8L
    (hide-hole s)
    '(begin (set! rax rax) (set! rdi rdi)))
(redex-match
    paren-x64-v8L
    (in-hole p s)
    '(begin (set! rax rax) (set! rdi rdi)))
(redex-match
    paren-x64-v8L
    (in-hole s p)
    '(begin (set! rax rax)))
(redex-match
    paren-x64-v8L
    (in-hole s p)
    '(begin hole (set! rax rax)))
(redex-match
    paren-x64-v8L
    p
    '(begin (set! rax rax) hole))
(redex-match
    paren-x64-v8L
    p
    (term (begin (set! rax rax) hole)))
,stx paren-x64-v8L !
paren-x64-v8L
(language-nts paren-x64-v8L)
(substitute (a b) (c d))
(substitute (a b) (b d))
(substitute (term (a b)) (term (b a)))
(substitute (a b) (b a))
(term-match paren-x64-v8L [s s])
((term-match paren-x64-v8L [s s]) '(begin (set! rax rax)))
((term-match paren-x64-v8L [p p]) '(begin (set! rax rax)))
((term-match paren-x64-v8L [p #t]) '(begin (set! rax rax)))
((term-match paren-x64-v8L [s #t]) '(begin (set! rax rax)))
((term-match paren-x64-v8L [s #t][_ #f]) '(begin (set! rax rax)))
((term-match paren-x64-v8L [p #t][_ #f]) '(begin (set! rax rax)))
(plug (term (begin (set! rax rax)) #:lang paren-x64-v8L) s)
(plug (term (begin (set! rax rax)) #:lang paren-x64-v8L) (term s))
(plug (term (begin (set! rax rax)) #:lang paren-x64-v8L) (term (set! rax rax)))
(plug (term (begin (set! rax rax)) #:lang paren-x64-v8L) (term (set! rax rdi)))
(plug (term (begin (set! rax rax) hole) #:lang paren-x64-v8L) (term (set! rax rdi)))
(plug (term (begin hole (set! rax rax) hole) #:lang paren-x64-v8L) (term (set! rax rdi)))
(plug (term (begin hole (set! rax rax)) #:lang paren-x64-v8L) (term (set! rax rdi)))
(langauge-nts paren-x64-v8L)
(language-nts paren-x64-v8L)
(require redex/pict)
(render-term paren-x64-v8L s)
(term->pict paren-x64-v8L s)
(term->pict/pretty-write paren-x64-v8L s)
(term->pict/pretty-write paren-x64-v8L (term s))
(struct? paren-x64-v8L)
(language? paren-x64-v8L)
(compiled-lang? paren-x64-v8L)
(compiled-lang-delayed-cclang paren-x64-v8L)
(compiled-lang-ht paren-x64-v8L)
(compiled-lang-cclang paren-x64-v8L)
(require redex/private/lang-struct)
(compiled-lang-cclang paren-x64-v8L)
clear
,clear
(compiled-lang-across-hit paren-x64-v8L)
(compiled-lang-across-ht paren-x64-v8L)
(compiled-lang-across-list-ht paren-x64-v8L)
(first (compiled-lang-across-list-ht paren-x64-v8L))
(first (compiled-lang-across-list-ht paren-x64-v8L))
(require racket)
(first (compiled-lang-across-list-ht paren-x64-v8L))
(dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s)
(first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s))
(second (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s)))
(compiled-pattern-cp (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s)))
((compiled-pattern-cp (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s))) 10)
((compiled-pattern-cp (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s))) 10 #f 10)
((compiled-pattern-cp (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s))) #t #f 10)
((compiled-pattern-cp (first (dict-ref (compiled-lang-across-list-ht paren-x64-v8L) 'triv-s))) #f #f 10)
(language-nts paren-x64-mops-v8L)
(require xrepl)
(require redex/reduction-semantics)
(require (for-syntax syntax/parse racket/syntax))
(require cpsc411/langs/v8)
(define-sytnax (test-sym-list stx))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        . a]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(a ...)
        . a]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        #'( a ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        #'( a ...)]))
(require racket)
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        #'( a ...)]))
,stx (test-sym-list '(a b c)) !
,stx (test-sym-list '(a b c)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        #`( ,a ...)]))
,stx (test-sym-list '(a b c)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       ['(a ...)
        #`( #,a ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`( #,a ...)]))
(define-syntax-parser test-sym-list
       [(_ '(a ...))
        #`((unquote a) ...)])
(define-syntax (test-sym-list stx)
       [(_ '(a ...))
        #`((unquote a) ...)])
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`((unquote a) ...)]))
,stx (test-sym-list '(a b c)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`(#,(symbol->identifier a) ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`(#,(symbol->identifier #'a) ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`(#,(symbol->identifier #'a) ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`((unquote a) ...)]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`()]))
(datum->syntax 'a)
(identifier 'a)
(symbol->identifier 'a)
(require syntax/identifier)
(require syntax/identifier)
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ '(a ...))
        #`(#,(symbol->identifier #'a) ...)]))
(language-nts paren-x64-mops-x8L)
(language-nts paren-x64-mops-v8L)
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id "~a-~a?" name term) (redex-match? lang term))]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id "~a-~a?" #'name #'term) (redex-match? #'lang #'term))]))
,stx (test-sym-list paren-x64-mops-v8L lang triv)
,stx (test-sym-list paren-x64-mops-v8L lang triv) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term) (redex-match? #'lang #'term))]))
,stx (test-sym-list paren-x64-mops-v8L lang triv) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term) (redex-match? #,lang #'term))]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term) (redex-match? #,(syntax-e #'lang) #'term))]))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term) (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang triv) !
,stx (test-sym-list paren-x64-mops-v8L lang triv) +
(test-sym-list paren-x64-mops-v8L lang triv)
(lang-triv? 41)
(lang-triv? 'rax)
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]
       [(_ lang name (term . terms))
        #`((test-sym-list lang name term)
           (test-sym-list lang name terms))]))
,stx (test-sym-list paren-x64-mops-v8L lang triv) +
,stx (test-sym-list paren-x64-mops-v8L lang (triv s)) +
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) +
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (term . terms))
        #`((test-sym-list lang name term)
           (test-sym-list lang name terms))]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) +
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (qoute (term . terms)))
        #`((test-sym-list lang name term)
           (test-sym-list lang name (qoute terms)))]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) +
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (qoute (term . terms)))
        #`(begin
            (test-sym-list lang name term)
            (test-sym-list lang name (qoute terms)))]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (qoute (term . terms)))
        #`(begin
            (test-sym-list lang name term)
            (test-sym-list lang name (qoute terms)))]
       [(_ lang name (qoute ()))
        #'(begin void)]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]
       ))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (qoute (term . terms)))
        #`(begin
            (test-sym-list lang name term)
            (test-sym-list lang name (qoute terms)))]
       [(_ lang name (qoute ()))
        #'(begin void)]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]
       ))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang name (qoute (term . terms)))
        #`(begin
            (test-sym-list lang name term)
            (test-sym-list lang name (qoute terms)))]
       [(_ lang name (qoute ()))
        #'(begin void)]
       [(_ lang name term)
        #`(define #,(format-id stx "~a-~a?" #'name #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]
       ))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang pre (qoute (term . terms)))
        #`(begin
            (test-sym-list lang pre term)
            (test-sym-list lang pre (qoute terms)))]
       [(_ lang pre (qoute ()))
        #'(begin void)]
       [(_ lang pre (a))
        #`(test-sym-list lang pre #,(#'a))]
       [(_ lang pre term)
        #`(define #,(format-id stx "~a-~a?" #'pre #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) !
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang pre (qoute (term . terms)))
        #`(begin
            (test-sym-list lang pre term)
            (test-sym-list lang pre (qoute terms)))]
       [(_ lang pre (qoute ()))
        #'(begin void)]
       [(_ lang pre (func arg))
        #`(test-sym-list lang pre #,((syntax-e #'func) (syntax-e #'arg)))]
       [(_ lang pre term)
        #`(define #,(format-id stx "~a-~a?" #'pre #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang '(triv s)) !
,stx (test-sym-list paren-x64-mops-v8L lang (language-ntf paren-x64-mops-v8L)) !
,stx (test-sym-list paren-x64-mops-v8L lang (language-ntf paren-x64-mops-v8L)) !
,stx (test-sym-list paren-x64-mops-v8L lang (language-nta paren-x64-mops-v8L)) !
,stx (test-sym-list paren-x64-mops-v8L lang (language-nts paren-x64-mops-v8L)) !
(language-nts paren-x64-mops-v8L)
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang pre (qoute (term . terms)))
        #`(begin
            (test-sym-list lang pre term)
            (test-sym-list lang pre (qoute terms)))]
       [(_ lang pre (qoute ()))
        #'(begin void)]
       [(_ lang pre (func arg))
        #`(test-sym-list lang pre #,((syntax-e #'func) (syntax-e #'arg)))]
       [(_ lang pre term)
        #`(define #,(format-id stx "~a-~a?" #'pre #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
(define (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(func arg))]))
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(func arg))]))
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(#,func #,arg))]))
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(#'func #'arg))]))
,stx (test-call (add 1)) +
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,((syntax-e #'func) (syntax-e #'arg)))]))
,stx (test-call (add 1)) +
,stx (test-call (add1 1)) +
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,((unquote (syntax-e #'func)) (unquote (syntax-e #'arg))))]))
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(eval `(,(syntax-e #'func) ,(syntax-e #'arg))))]))
,stx (test-call (add1 1)) +
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang pre (qoute (term . terms)))
        #`(begin
            (test-sym-list lang pre term)
            (test-sym-list lang pre (qoute terms)))]
       [(_ lang pre (qoute ()))
        #'(begin void)]
       [(_ lang pre (func arg))
        #`(test-sym-list lang pre #,(eval `(,(syntax-e #'func) ,(syntax-e #'arg))))]
       [(_ lang pre term)
        #`(define #,(format-id stx "~a-~a?" #'pre #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang (language-nts paren-x64-mops-v8L)) !
(language-nts paren-x64-mops-v8L)
,stx (test-sym-list paren-x64-mops-v8L lang (language-nts paren-x64-mops-v8L)) +
(require (for-meta 3 redex/reduction-semantics) (for-meta 3 cpsc/langs/v8))
(require (for-meta 3 redex/reduction-semantics) (for-meta 3 cpsc411/langs/v8))
(define-syntax (test-sym-list stx)
     (syntax-parse stx
       [(_ lang pre (qoute (term . terms)))
        #`(begin
            (test-sym-list lang pre term)
            (test-sym-list lang pre (qoute terms)))]
       [(_ lang pre (qoute ()))
        #'(begin void)]
       [(_ lang pre (func arg))
        #`(test-sym-list lang pre #,(eval `(,(syntax-e #'func) ,(syntax-e #'arg))))]
       [(_ lang pre term)
        #`(define #,(format-id stx "~a-~a?" #'pre #'term)
            (redex-match? #,(syntax-e #'lang) #,(syntax-e #'term)))]))
,stx (test-sym-list paren-x64-mops-v8L lang (language-nts paren-x64-mops-v8L)) +
(eval `(language-nts paren-x64-mops-v8L))
,stx (redex-match paren-x64-mops-v8L p)
,stx (redex-match paren-x64-mops-v8L p) !
,stx (redex-match paren-x64-mops-v8L p) !
(define-syntax (test-call stx)
     (syntax-parse stx
       [(_ (func arg))
        #`(#,(eval `(,(syntax-e #'func) ,(syntax-e #'arg))))]))
,stx (test-call (add1 1)) +
,stx (test-call (add1 10)) +
,stx (test-call (sub1 10)) +
,stx (test-call (language-nts paren-x64-mops-x8:L)) +
,stx (test-call (language-nts paren-x64-mops-x8L)) +
,stx (test-call (language-nts paren-x64-mops-x8L)) +
(require (for-space 3 redex/reduction-semantics) (for-space 3 cpsc411/langs/v8))
(require xrepl)
(require redex/reduction-semantics)
(require cpsc411/langs/v8)
paren-x64-mops-v8L
paren-x64-mops-v8L1
paren-x64-mops-v8L28
stx (redex-match? paren-x64-mops-v8L triv)
,stx (redex-match? paren-x64-mops-v8L triv) +
,stx (redex-match? paren-x64-mops-v8L triv) !
,stx (redex-match? paren-x64-mops-v8L triv) +
(do-redex-match paren-x64-mops-v8L `(name triv (nt triv)) '(triv) 'tcp-accept:10:5)
(begin (void) (do-redex-match paren-x64-mops-v8L `(name triv (nt triv)) '(triv) 'tcp-accept:10:5))
(require redex/private/reduction-semantics)
(begin (void) (do-redex-match paren-x64-mops-v8L `(name triv (nt triv)) '(triv) 'tcp-accept:10:5))
(begin (void) (do-redex-match paren-x64-mops-v8L `(name triv (nt triv)) '(triv) 'tcp-accept:10:5 #t))
((do-redex-match paren-x64-mops-v8L `(name triv (nt triv)) '(triv) 'tcp-accept:10:5 #t) 214)
(require (for-syntax racket/syntax syntax/parse))
(require racket/syntax syntax/parse)
(define current-lang (make-parameter void))
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #'(define #'alias (do-redex-match (current-lang) `(name #'nonterm (nt #'nonterm)) '(#'nonterm) #t))]))
(require racket)
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #'(define #'alias (do-redex-match (current-lang) `(name #'nonterm (nt #'nonterm)) '(#'nonterm) #t))]))
(current-lang paren-x64-mops-v8L)
(define-nonterm-check triv? triv)
(triv? 12)
,stx (define-nonterm-check triv? triv) +
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #`(define #'alias (do-redex-match (current-lang) `(name #'nonterm (nt #'nonterm)) '(#'nonterm) #t))]))
,stx (define-nonterm-check triv? triv) +
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) #t))]))
,stx (define-nonterm-check triv? triv) +
(define-nonterm-check triv? triv)
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))]))
(define-nonterm-check triv? triv)
(triv? 1)
(triv? 'a)
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))]))
(define-nonterm-check s? s)
(s? '(set! rax rax))
(define-syntax (define-nonterm-check stx)
     (syntax-parse stx
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))]))
triv?
(define-syntax-parser define-nonterm-check
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))])
(define-syntax-parse-rule define-nonterm-check
       [(_ alias nonterm)
        #`(define alias (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))])
(define-syntax-parse-rule (define-nonterm-check alias nonterm)
     (do-redex-match (current-lang) `(name nonterm (nt nonterm)) '(nonterm) 'alias #t))
(make-parameter void (λ (lang) (if (compiled-lang? lang)
                                                      lang
                                                      (error "lang required"))))
(define test-gaurd (make-parameter void (λ (lang) (if (compiled-lang? lang)
                                                                         lang
                                                                         (error "lang required")))))
(require cpsc411/langs/v8)
(test-gaurd paren-x64-v8)
(test-gaurd paren-x64-v8L)
(test-gaurd)
(test-gaurd void)
(make-exn:fail)
(make-exn:fail:contract "lang required" (current-continuation-marks))
(throw (make-exn:fail:contract "lang required" (current-continuation-marks)))
(raise (make-exn:fail:contract "lang required" (current-continuation-marks)))
(current-lang)
